% This writes out a protocl to disk in the form of a yaml file
% It takes in the protocol information as a cell array, protocol
% Note that as of now it can only handle one polygon per step.
% Note width is NOT radius. 
function [] = writeProto (filename,description,width,height,protocol)
assert(ischar(filename),'Error: filename must be a string')
assert(ischar(description),'Error: description must be a string in writeProto')
assert(isnumeric(width),'Error: width must be a number')
assert(isnumeric(height),'Error: width must be a number')
assert(iscell(protocol),'Error: protocol must be a cell')


fid = fopen(filename,'w');

writeYAMLheader(fid)
writeProtocolComments(fid);

% height=99;
% width=21;


i=0; %indentation starts at zero.
i=startWriteStruct(fid,'Protocol',i);

    i=writeString(fid,'Filename',filename,i);
    i=writeString(fid,'Description',description,i);
    i=startWriteStruct(fid,'GridSize',i);
        i=writeInt(fid,'height',height,i);
        i=writeInt(fid,'width',width,i);
    i=endWriteStruct(fid,i);
    i=startWriteList(fid,'Steps',i);
        %For each montage
        for m=1:length(protocol)
        i=startWriteListItem(fid,'',i);
        % for each polygon
        % NOTE! For now we are assuming only one protocol per montage
        i = writeCVSeqItem(fid,protocol{m},i);
        
        
        i=endWriteListItem(fid,i);
        end
        
    i=endWriteList(fid,i);
    
    


endWriteStruct(fid,i);

end

%%%Protocol Items
function []=writeProtocolComments(fid)
indent=0;
writeComment(fid,'Generated by custom MATLAB protocol writer.',indent);
writeComment(fid,'by Andrew Leifer',indent);
writeComment(fid,'leifer@fas.harvard.edu',indent);
writeComment(fid,datestr(now),indent);
end




%%%% OpenCV Primitives

% This writes out an OpenCV CVSeq array of ints. It is used only  when
% the CVSeq is part of a list of items.
function [indent] = writeCVSeqItem(fid,arr,indent)
            indent=startWriteListItem(fid,'!!opencv-sequence',indent);
                indent=writeString(fid,'flags','4299000c',indent);
                indent=writeInt(fid,'count',4,indent);
                indent=writeString(fid,'dt','2i',indent);
                indent=writeArray(fid,'data',arr,indent);
            indent=endWriteListItem(fid,indent);
end




%%%%%%%%%%%  YAML Primitives
function [] = writeYAMLheader(fid)
fprintf(fid,'%s\n','%YAML:1.0');
end

function [indentOut] = writeComment(fid,text,indent)

assert(ischar(text),'In comment(), text must be a string.');
indentYAML(fid,indent);
fprintf(fid,'# %s\n',text);
indentOut=indent;

end

function [indentOut] = writeArray(fid,name,data,indent)
assert(ischar(name)),'In writeArray(), name must be a string.';
assert(isnumeric(data),'In writeArray(), data must be numeric.');

indentYAML(fid,indent);

fprintf(fid,'%s: ', name);
fprintf(fid,'[ ');
    for i=1:(length(data)-1)
        fprintf(fid,'%g,     ',data(i));
    end
fprintf(fid,'%d ]\n',data(end));
indentOut=indent;

end

function [indentOut] = writeInt(fid,name,x,indent)

assert(ischar(name)),'In writeInt(), name must be a string.';
assert(isnumeric(x),'In writeInt(), x must be numeric.');

indentYAML(fid,indent);

fprintf(fid,'%s: %d\n', name,x);
indentOut=indent;

end



function [indentOut] = writeString(fid,name,string,indent)
assert(ischar(name)),'Name must be a string.';
assert(ischar(string),'String must be a string.');

indentYAML(fid,indent);
fprintf(fid,'%s: "%s"\n', name,string);

indentOut=indent;

end



% Start writing a list item. Leave name '' if the list item is just a list
% of more list items.
function [indentOut] =startWriteListItem(fid,name,indent)
assert(ischar(name),'In startWriteListItem(), name must be a string.');

indentYAML(fid,indent);
fprintf(fid,'- %s\n',name);

%Increase indent by 1
indentOut=indent+1;

end

function [indentOut] = endWriteListItem(fid,indent)
assert(isnumeric(indent),'Indent must be integer.')
assert((indent>0),'Indent must be greater than one, to stop writing a list.')
%Decrease indent by one.
indentOut=indent-1;
end


function [indentOut] =startWriteList(fid,name,indent)
assert(ischar(name),'In startWriteList(), name must be a string.');

indentYAML(fid,indent);
fprintf(fid,'%s:\n',name);

%Increase indent by 1
indentOut=indent+1;

end


function [indentOut] = endWriteList(fid,indent)
assert(isnumeric(indent),'Indent must be integer.')
assert((indent>0),'Indent must be greater than one, to stop writing a list.')
%Decrease indent by one.
indentOut=indent-1;
end

function [indentOut] =startWriteStruct(fid,name,indent)
assert(ischar(name),'In startWrite(), name must be a string.');

indentYAML(fid,indent);
fprintf(fid,'%s:\n',name);

%Increase indent by 1
indentOut=indent+1;

end

function [indentOut] = endWriteStruct(fid,indent)
assert(isnumeric(indent),'Indent must be integer.')
assert((indent>0),'Indent must be greater than zero, to stop writing a struct.')
%Decrease indent by one.
indentOut=indent-1;
end

function [] = indentYAML(fid,x)
assert(isnumeric(x),'In indent() ind must be integer.'); 
    for i=1:x
        fprintf(fid,'   ');
    end
end

